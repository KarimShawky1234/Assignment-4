This is a report for the CS2 assignment 4


LinkedList.h:

	I started off by include the "vector" library because it will be used in the "createList" 	function. The class LinkedList contains a struct called node which had 3 member variables: item 	(the value of the number), count (the number of occurrences of this item in the vector), and 	next (a node pointer 	to point to the next item in the linked list).  I then created a "head" 	pointer which points to the first item in the linked list and is initialized to NULL when the 	class is called. InsNode function is also created in order to insert a node into the linked 	list. This function takes in a number as parameter. It first checks if the linked list is still 	empty (if head == NULL), if so, The function creates a node, sets the value of the first node 	to the value of the num input and then sets the next pointer to point to nothing (NULL). If 	the Linkedlist is not empty, The function creates a newnode pointer, assigns it's item value to 	the num input into the function as parameter, sets that node to point to the first node in the 	linked list (head) and finally sets the head pointer to the value of the newNode. 

	I then created the second function which is the removeNode function, This function takes an 	integer n. The function then checks whether the linked list is empty by checking is head is equal 	to "NULL", if it is, it outputs an error messages saying the linked list is empty and exits the 	function. If the linked list is not empty, the function checks if the integer n entered is in the 	first node, if so, the function declares a pointer temp of type node and assigns it to heads, 	assigns head to the next node in line making it the first node then deletes the first node in the 	linked list and exits the function. If neither IF statement is true, the function will declare a 	node pointer current and assign it to head, the function will then enter a while loop which will 	keep setting the current node pointer to the next node in line until the next point of the 	current node is pointing to nothing (== NULL) or the next item of the node pointer current is 	equal to n. If the next pointer of the node current is pointing to nothing (NULL), this means 	that the item was not found in the linked list and an error message is output to the user and 	the function is exit. If none of the previous 3 IF statements are excuted (linked list is 	not 	empty, n is not in the first node, and the value is found in the linked list) then the 	function creates a node pointer temp and assigns the next pointer of the node current to it, 	the function then sets this next node to the node after that and then deletes the node 	pointed to by the node pointer temp.

	The printList function is used to print the linkedlist to the user's screen. The function first 	checks whether the list is empty or not (if head == NULL this means list is empty) and outputs an 	error message if list is empty. if list is not empty, the function creates a node point called 	current and assigns the head node pointer to it, the function then enters a while loop that will 	keep 	outputing the current item and then setting the current item to the node pointed at by the 	next pointer until the current node is pointing to nothing (== NULL).

	for the create list function. The function takes in a vector of type int parameter called v, the 	function then creates a current node pointer and assigns its value to the node pointer head. the 	function this enters a for loop that starts from the size of the vector v -1 until it reaches 0, 	the for loop will keep decrementing i, the reason for this is that we want to make sure the 	linked list is created in the correct order (from start of the vector to the end of it). A 	temporary variable called num is created and assigned to the value found in the vector at index 	i. The function then checks if the linked list is still empty (the v[i] is still the first 	element to be entered into the linked list) this condition is true if the head pointer is 	pointing to nothing (==NULL). If the condition is true, the function will assign head to a brand 	new node. Thhe function then sets the item of the head node to the num stored in the index i of 	the vector, sets the number of occurrences to one and then nullifies the next pointer of that 	node so that it is the last node in the linked list. If the condition is not true, the function 	will create a node pointer current and assign it's value to the node pointer head and then keeps 	setting the setting the value of current to the next node in the linked list while the current 	node pointer is not pointing to nothing (NULL) and the item pointed to by the current node 	pointer is not equal to the value stored in v[i]. If the current is pointing to nothing (==NULL), 	the function will create a new node pointer newNode, set it's value to the num stored in v[i], 	set the number of occurrences to 1 and then make it's next pointer set to the head node pointer 	and makes the newNode as the head node. else the number of occurrences of the current item is 	incremented by 1.

	Finally, the sumList function is used to sum the values in the linkedlist and return the sum. The 	function initializes a sum variable to 0 and a node pointer current which is set to the node 	pointer head. The function enters a while loop which keeps excuting while the current node 	pointer is not equal to NULL (last node in the linked list). The while loop adds the value of the 	current item multiplied by the count of current (value stored in the item multiplied by the 	number of occurrences) and then sets the current node pointer to the next node in line.



main: 

	 First, the vector library has to be included to store the numbers input by the user and the 	LinkedList.h file has to be included to utilize the linked list class created earlier.

	the main first starts of by declaring a vector named v which takes elements of type int, the 	program also declares 4 variables: n (Used to enter the number of elements the user will input), 	num (temporary variable to store the num input so that it can be added to the vector), firstVal 	(used to store the value that the user wants to enter another value after each occurrence of), 	secondVal (the number which will be added after every occurrence of firstVal). the program then 	asks the user to enter the number of integers they will input and then asks the user to fill in 	the vector. The user is then asked to enter the firstVal and secondVal which are then sent to the 	function insertAfter alongside the vector.

	insertAfter(...):

		This function takes in 3 parameters firstVal, SecondVal, and vector vec. The function enters 		a for loop which keeps incrementing until the value of i is equal to the size of the vector. 		The for loop checks if the value of the element stored in the vector at index i is equal to 		the 	value of firstValue, if it is, then the value of secondValue is inserted into the 			vector using .insert 	function found in the vector library at index vec.begin() + i + 1 			(1 place after 	the index i) and the function then returns the newly modified vector.

	the vector returned from the insertAfter function is then stored in vector v. A LinkedList "list" 	is then created using the LinkedList class and using a for loop - which starts at the last index 	of the vector v and decrements i until it is less than 0 - is then used to insert each value in 	the vector to the linked list "list". finally the .printList() function is used to output the 	elements of the linked list and the .sumList() function is used to print the sum of the elements 	in the list.

Problems faced:
	
	The only problem I faces while creating this program was that when I used the .createList 	function, it worked, but everytime I output the elements of the list, it duplicated the last 	element when it input the value for some reason. So for example if the user inputs 5 integers 1 2 	3 2 5, and enter 0, as the secondVal, the program will output 1 2 0 3 2 0 5 5 instead of 1 2 0 3 	2 0 5.I couldn't find whether the issue was with the .createList() function or with 	the .printList() function but I do think the issue is with the .createList() function because 	when I used the .InsNode() function, it worked fine as obvious from the output screenshots-.